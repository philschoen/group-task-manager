// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String       @id @default(cuid())
  email    String       @unique
  name     String?
  password String // Hashed password
  teams    TeamMember[]
  tasks    Task[]

  createdTasks Task[] @relation("CreatedTasks")

  assignedTasks Task[] @relation("AssignedTasks")
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
  tasks       Task[]
}

model TeamMember {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  role   String // "ADMIN", "MEMBER"

  @@id([userId, teamId])
}

model Task {
  id           String    @id @default(cuid())
  title        String
  description  String?
  status       String // "TODO", "IN_PROGRESS", "DONE"
  createdBy    User      @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById  String
  assignedTo   User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?
  team         Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  dueDate      DateTime?

  User User[]
}
